# MiniMalloc-C

A custom implementation of `malloc()` and `free()` in C, simulating low-level heap allocation within a fixed-size memory region. Designed to mimic real memory allocators, this project includes chunk-based metadata, alignment, coalescing, error detection, and memory leak tracking.

---

## üîß Features

- **Fixed-size memory pool** (`4096 bytes`)
- **Static byte array** used for both metadata and user allocations
- **Chunk structure**: header (metadata) + payload (user-accessible memory)
- **8-byte alignment** for all memory blocks
- **First-fit allocation** strategy
- **Automatic coalescing** of adjacent free blocks during `free()`
- **Robust error detection**:
  - Double-free detection
  - Invalid pointer (non-heap or unaligned)
  - Mid-chunk pointer detection
- **Memory leak detection**:
  - Reports all unfreed allocations on exit using `atexit()`
- **Debug tracking**:
  - Preprocessor macros `__FILE__` and `__LINE__` track call origins

---

## üìÅ File Overview

| File           | Description                                      |
|----------------|--------------------------------------------------|
| `mymalloc.c`   | Core implementation of allocator and deallocator |
| `mymalloc.h`   | Header file and macro interface                  |
| `memgrind.c`   | Performance benchmarking program                 |
| `Makefile`     | Compilation instructions                         |
| `readme`       | Project documentation                            |

---

## üö¶ Performance Testing

The `memgrind` benchmark simulates five memory usage patterns, each repeated 50√ó, with time measured using `gettimeofday()`:

1. **malloc + immediate free**
2. **batch malloc ‚Üí batch free**
3. **randomized malloc/free** with memory quota
4. **custom workload 1**
5. **custom workload 2**

These tests stress the allocator‚Äôs coalescing and fragmentation handling capabilities while validating correctness.

---

## üß™ Example: Error Detection in Action

```c
int *x = malloc(10 * sizeof(int));
free(x);
free(x); // Triggers: double free error
````

---

## üìå Key Concepts Demonstrated

* Manual memory layout and chunk modeling
* Allocation strategies and alignment
* Error detection without external tooling
* Minimalist leak tracking
* Systems-level C programming and testing

---

This project showcases strong understanding of low-level memory management and simulates key behaviors of system allocators like `malloc()` and `free()` ‚Äî without relying on external libraries or OS memory calls.

```

---

